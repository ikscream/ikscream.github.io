# Workflow Name
# This workflow is named 'terraform-fmt' and is designed to check the formatting of Terraform code.
# GitHub Actions Workflow Syntax: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
name: terraform-fmt

# Trigger Events
# This workflow triggers on pull requests and pushes to the repository.
# GitHub Actions Events: https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows
on:
  pull_request:
  push:

# Jobs
# Defines a job named 'build' which checks the format of Terraform code.
# GitHub Actions Jobs: https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow
jobs:
  build:
    # Job Name
    # The job is named 'Terraform Format Check'.
    name: Terraform Format Check

    # Runner
    # This job runs on the latest Ubuntu runner.
    # GitHub Actions Runners: https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
    runs-on: ubuntu-latest

    # Steps
    # A series of steps that the job will execute.
    # GitHub Actions Steps: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idsteps
    steps:
      # Step 1: Check out the repository
      # Uses the actions/checkout@v3 action to check out the repository.
      # actions/checkout: https://github.com/actions/checkout
      - uses: actions/checkout@v3
        with:
          # Fetch all history for all tags and branches
          fetch-depth: 0

      # Step 2: Set up Terraform
      # Uses the hashicorp/setup-terraform@v2 action to set up Terraform.
      # This action installs a specific version of Terraform.
      # hashicorp/setup-terraform: https://github.com/hashicorp/setup-terraform
      - uses: hashicorp/setup-terraform@v2
        with:
          # Specify the version of Terraform to use.
          terraform_version: 1.6.6

      # Step 3: Terraform fmt
      # Runs 'terraform fmt' to check the format of the Terraform code.
      # The '-check' option is used to check the format without making changes.
      # Terraform fmt documentation: https://www.terraform.io/cli/commands/fmt
      - name: Terraform fmt
        id: fmt
        # Run Terraform format check
        run: terraform fmt -check
        # If format check fails, the job will fail
        continue-on-error: false
        # Specify the working directory
        working-directory: ./terraform

  notify:
    if: always()  # This ensures that this job runs even if the previous job fails
    runs-on: ubuntu-latest
    needs: 
      - build
    steps:
    - name: Notify Telegram
      env:
        TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_TO }}
        JOB_STATUS: ${{ needs.build.result }}
      run: |
        if [[ "$JOB_STATUS" == "success" ]]; then
          emoji="✅"
          text="${{ github.event.commits[0].message }}"
        else
          emoji="❌"
          text="${{ github.event.commits[0].message }}"
        fi

        message="$emoji $text"
        
        curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" -d chat_id="$TELEGRAM_CHAT_ID" -d text="$message"